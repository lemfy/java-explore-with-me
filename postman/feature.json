{
  "info": {
    "_postman_id": "1967c92b-e0b7-4b48-bcab-e4d5bb1bd860",
    "name": "Test Explore With Me - Feature rating events",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27863546",
    "_collection_link": "https://gold-station-921092.postman.co/workspace/Team-Workspace~95e046ac-a30a-44f3-871e-1f1b396cc609/collection/27863546-1967c92b-e0b7-4b48-bcab-e4d5bb1bd860?action=share&creator=27863546&source=collection_link"
  },
  "item": [
    {
      "name": "Validation",
      "item": [
        {
          "name": "Likes",
          "item": [
            {
              "name": "Required query params",
              "item": [
                {
                  "name": "Добавление нового лайка для несуществующего события",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set(\"uid\", user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.notFound",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events",
                        ":id",
                        "likes",
                        ":userId"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "LIKE"
                        }
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "0"
                        },
                        {
                          "key": "userId",
                          "value": "{{uid}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление нового лайка от несуществующего пользователя",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set(\"uid\", user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.notFound",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events",
                        ":id",
                        "likes",
                        ":userId"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "LIKE"
                        }
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{eid}}"
                        },
                        {
                          "key": "userId",
                          "value": "0"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление нового лайка без параметра type",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set(\"uid\", user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.badRequest",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/events/:id/likes/:userId?type=UNDEFINED",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events",
                        ":id",
                        "likes",
                        ":userId"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "UNDEFINED"
                        }
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{eid}}"
                        },
                        {
                          "key": "userId",
                          "value": "{{uid}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Удаление лайка для несуществующего события",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set(\"uid\", user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.notFound",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/events/:id/likes/:userId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events",
                        ":id",
                        "likes",
                        ":userId"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "0"
                        },
                        {
                          "key": "userId",
                          "value": "{{uid}}"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Удаление лайка от несуществующего пользователя",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set(\"uid\", user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.notFound",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/events/:id/likes/:userId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events",
                        ":id",
                        "likes",
                        ":userId"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{eid}}"
                        },
                        {
                          "key": "userId",
                          "value": "0"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Event",
          "item": [
            {
              "name": "Misc tests",
              "item": [
                {
                  "name": "Получение событий с возможностью сортировки по рейтингу",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {\r",
                          "    const api = new API(pm);\r",
                          "    const rnd = new RandomUtils();\r",
                          "\r",
                          "    try {\r",
                          "        const user = await api.addUser(rnd.getUser());\r",
                          "        const category = await api.addCategory(rnd.getCategory());\r",
                          "        \r",
                          "        const event1 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        for(i = 0; i < 5; i++){\r",
                          "            var userTmp = await api.addUser(rnd.getUser());\r",
                          "            await api.addLike(userTmp.id, event1.id);\r",
                          "        }\r",
                          "\r",
                          "        const event2 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        for(i = 0; i < 4; i++){\r",
                          "            var userTmp = await api.addUser(rnd.getUser());\r",
                          "            await api.addLike(userTmp.id, event2.id);\r",
                          "        }\r",
                          "\r",
                          "        const event3 = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        for(i = 0; i < 3; i++){\r",
                          "            var userTmp = await api.addUser(rnd.getUser());\r",
                          "            await api.addLike(userTmp.id, event3.id);\r",
                          "        }\r",
                          "\r",
                          "        pm.collectionVariables.set(\"eid\", event.id)\r",
                          "    } catch(err) {\r",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                          "    }\r",
                          "};\r",
                          "\r",
                          "const interval = setInterval(() => {}, 1000);\r",
                          "\r",
                          "setTimeout(async () => \r",
                          "    {\r",
                          "        try {\r",
                          "            await main();\r",
                          "        } catch (e) {\r",
                          "            console.error(e);\r",
                          "        } finally {\r",
                          "            clearInterval(interval);\r",
                          "        }\r",
                          "    },  \r",
                          "    100 \r",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                          "    pm.response.to.be.ok;\r",
                          "    pm.response.to.be.withBody;\r",
                          "    pm.response.to.be.json;\r",
                          "});\r",
                          "\r",
                          "const target = pm.response.json();\r",
                          "\r",
                          "pm.test(\"Первый элемент списка должен быть с самым высоким рейтингом\", function () {\r",
                          "    console.log(target[0].rating);\r",
                          "    pm.expect(target[2].rating).to.below(target[1].rating);\r",
                          "    pm.expect(target[1].rating).to.below(target[0].rating);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/events?rangeStart=2022-01-01%2013%3A30%3A38&rangeEnd=2024-01-01%2013%3A30%3A38&onlyAvailable=false&sort=RATING&from=0&size=1000",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "events"
                      ],
                      "query": [
                        {
                          "key": "rangeStart",
                          "value": "2022-01-01%2013%3A30%3A38",
                          "description": "дата и время не раньше которых должно произойти событие"
                        },
                        {
                          "key": "rangeEnd",
                          "value": "2024-01-01%2013%3A30%3A38",
                          "description": "дата и время не позже которых должно произойти событие"
                        },
                        {
                          "key": "onlyAvailable",
                          "value": "false",
                          "description": "только события у которых не исчерпан лимит запросов на участие"
                        },
                        {
                          "key": "sort",
                          "value": "RATING",
                          "description": "Вариант сортировки: по дате события или по количеству просмотров"
                        },
                        {
                          "key": "from",
                          "value": "0",
                          "description": "количество событий, которые нужно пропустить для формирования текущего набора"
                        },
                        {
                          "key": "size",
                          "value": "1000",
                          "description": "количество событий в наборе"
                        }
                      ]
                    },
                    "description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Users",
          "item": [
            {
              "name": "Misc tests",
              "item": [
                {
                  "name": "Получение списка пользователей лайкнувших событие Copy",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.ok",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});",
                          "",
                          "const target = pm.response.json();",
                          "",
                          "pm.test(\"Значение list size должно быть равным 0\", function () {",
                          "    pm.expect(target.length).to.be.equal(0);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/likes/:id?type=LIKE",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "likes",
                        ":id"
                      ],
                      "query": [
                        {
                          "key": "type",
                          "value": "LIKE"
                        }
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{eid}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "409 Conflict",
      "item": [
        {
          "name": "Добавление нового лайка для события от пользователя создавшего событие",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        ",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        pm.collectionVariables.set(\"uid\", user.id);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(409)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового лайка для события от пользователя уже добавившего лайк",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        api.addLike(user2.id, event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        pm.collectionVariables.set(\"uid\", user2.id);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(409)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового лайка для события от пользователя уже добавившего дизлайк",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        api.addDislike(user2.id, event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        pm.collectionVariables.set(\"uid\", user2.id);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(201)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового дизлайка для события от пользователя уже добавившего дизлайк",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        api.addDislike(user2.id, event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        pm.collectionVariables.set(\"uid\", user2.id);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(409)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=DISLIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "DISLIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Likes",
      "item": [
        {
          "name": "Добавление нового лайка для события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", user2.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(201)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление нового дизлайка для события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"uid\", user2.id)",
                  "        ",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(201)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=DISLIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "DISLIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление лайка для события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const user2 = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.addLike(user2.id, event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        pm.collectionVariables.set(\"uid\", user2.id)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(204)",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:id/likes/:userId?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id",
                "likes",
                ":userId"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                },
                {
                  "key": "userId",
                  "value": "{{uid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение списка пользователей лайкнувших событие",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        ",
                  "        for(i = 0; i < 5; i++){",
                  "            var userTmp = await api.addUser(rnd.getUser());",
                  "            await api.addLike(userTmp.id, event.id);",
                  "        }",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Значение list size должно быть равным 5\", function () {",
                  "    pm.expect(target.length).to.be.equal(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/likes/:id/?type=LIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "likes",
                ":id",
                ""
              ],
              "query": [
                {
                  "key": "type",
                  "value": "LIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение списка пользователей дизлайкнувших событие",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        for(i = 0; i < 5; i++){",
                  "            var userTmp = await api.addUser(rnd.getUser());",
                  "            await api.addDislike(userTmp.id, event.id);",
                  "        }",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Значение list size должно быть равным 5\", function () {",
                  "    pm.expect(target.length).to.be.equal(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/likes/:id/?type=DISLIKE",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "likes",
                ":id",
                ""
              ],
              "query": [
                {
                  "key": "type",
                  "value": "DISLIKE"
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Поиск пользователей (проверка поля rating)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let compilation;\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const user2 = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        await api.addLike(user2.id, event.id);\r",
                  "        pm.collectionVariables.set(\"uid\", user.id)\r",
                  "        \r",
                  "        for(i = 0; i < 5; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addLike(userTmp.id, event.id);\r",
                  "        }\r",
                  "\r",
                  "        for(i = 0; i < 2; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addDislike(userTmp.id, event.id);\r",
                  "        }\r",
                  "        \r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Пользователи должны содержать поля: id, name, email\", function () {\r",
                  "    pm.expect(target[0]).to.have.property('id');\r",
                  "    pm.expect(target[0]).to.have.property('name');\r",
                  "    pm.expect(target[0]).to.have.property('email');\r",
                  "    pm.expect(target[0]).to.have.property('rating');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Должен быть найден только один пользователь по заданному фильтру\", function () {\r",
                  "    pm.expect(target.length).to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target[0].id).equal(pm.collectionVariables.get(\"uid\"));\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать логике приложения\", function () {\r",
                  "    pm.expect(target[0].rating).greaterThan(0.38);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/users?ids={{uid}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "{{uid}}",
                  "description": "id пользователей"
                },
                {
                  "key": "ids",
                  "value": "-10833646",
                  "description": "id пользователей",
                  "disabled": true
                },
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество элементов, которые нужно пропустить для формирования текущего набора",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "10",
                  "description": "количество элементов в наборе",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Получение полной информации о событии (проверка полей likes, dislikes, rating)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id)\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "\r",
                  "        for(i = 0; i < 5; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addLike(userTmp.id, event.id);\r",
                  "        }\r",
                  "\r",
                  "        for(i = 0; i < 2; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addDislike(userTmp.id, event.id);\r",
                  "        }\r",
                  "\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('likes');\r",
                  "pm.expect(target).to.have.property('dislikes');\r",
                  "pm.expect(target).to.have.property('rating');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Значение поля likes должно быть равно 5\", function () {\r",
                  "    pm.expect(target.likes).equals(5);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Значение поля dislikes должно быть равно 2\", function () {\r",
                  "    pm.expect(target.dislikes).equals(2);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Значение поля rating должно быть больше 0.3\", function () {\r",
                  "    pm.expect(target.rating).greaterThan(0.33);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}",
                  "description": "(Required) id текущего пользователя"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}",
                  "description": "(Required) id события"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение подробной информации об опубликованном событии  (проверка полей likes, dislikes, rating)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "        pm.collectionVariables.set('response', event);\r",
                  "\r",
                  "        for(i = 0; i < 5; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addLike(userTmp.id, event.id);\r",
                  "        }\r",
                  "\r",
                  "        for(i = 0; i < 2; i++){\r",
                  "            var userTmp = await api.addUser(rnd.getUser());\r",
                  "            await api.addDislike(userTmp.id, event.id);\r",
                  "        }\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('publishedOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
                  "    pm.expect(source.category.id).equal(target.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
                  "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
                  "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
                  "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать описанию события с указанным идентификатором');\r",
                  "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
                  "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников события должен соответствовать лимиту участников события с указанным идентификатором');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Значение поля likes должно быть равно 5\", function () {\r",
                  "    pm.expect(target.likes).equals(5);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Значение поля dislikes должно быть равно 2\", function () {\r",
                  "    pm.expect(target.dislikes).equals(2);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Значение поля rating должно быть больше 0.33\", function () {\r",
                  "    pm.expect(target.rating).greaterThan(0.33);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}",
                  "description": "(Required) id события"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addLike(userId, eventId, verbose=null) {",
          "        this.post(\"/events/\" + eventId + \"/likes/\" + userId + \"?type=LIKE\", null, \"Ошибка при добавлении нового лайка: \", verbose);",
          "    }",
          "",
          "    async addDislike(userId, eventId, verbose=null) {",
          "        this.post(\"/events/\" + eventId + \"/likes/\" + userId + \"?type=DISLIKE\", null, \"Ошибка при добавлении нового дизлайка: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async removeLike(userId, eventId, verbose=null) {",
          "        return this.delete(\"/events/\" + eventId + \"/likes/\" + userId, \"Ошибка при удалении лайка: \", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"DELETE\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    if(response.stream.length){",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}